Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  us/call  us/call  name    
 66.67      0.02     0.02    31608     0.63     0.63  aes_128_decrypt(unsigned char*, unsigned char*, unsigned int*)
 33.33      0.03     0.01                             ECC_Enc(ECC_PK*, eccPoint*, eccParams*, __gmp_randstate_struct*)
  0.00      0.03     0.00   126146     0.00     0.00  doubleAndAdd_ScalarMul(__mpz_struct*, eccPoint*, eccParams*)
  0.00      0.03     0.00    96585     0.00     0.00  addEC_Point(eccPoint*, eccPoint*, eccParams*)
  0.00      0.03     0.00    33872     0.00     0.00  initialiseInputWire_Raw(int)
  0.00      0.03     0.00    33616     0.00     0.00  printGateOrWire(gateOrWire*)
  0.00      0.03     0.00    27641     0.00     0.00  doublePoint(eccPoint*, eccParams*)
  0.00      0.03     0.00    24868     0.00     0.00  new_idAndValue(int, unsigned char)
  0.00      0.03     0.00    24553     0.00     0.00  decryptionKeySchedule_128(unsigned int*)
  0.00      0.03     0.00    15805     0.00     0.00  expand_key(unsigned char*)
  0.00      0.03     0.00    15805     0.00     0.00  convertCharStringToUINT(unsigned char*)
  0.00      0.03     0.00     8748     0.00     0.00  garbleOutputTables(Circuit*)
  0.00      0.03     0.00     8748     0.00     1.27  decryptMultipleKeys(unsigned char**, int, unsigned char*, int)
  0.00      0.03     0.00     1038     0.00     0.00  serialiseMPZ_Array(__mpz_struct (*) [1], int, int*)
  0.00      0.03     0.00      517     0.00     0.00  deserialiseECC_Params(unsigned char*, int*)
  0.00      0.03     0.00      512     0.00     0.00  deserialiseMPZ(unsigned char*, int*)
  0.00      0.03     0.00      384     0.00     0.00  randomiseDDH_ECC(ECC_PK*, eccParams*, __gmp_randstate_struct*)
  0.00      0.03     0.00      384     0.00     0.00  initECC_Ciphertext()
  0.00      0.03     0.00      384     0.00     0.00  initAndSetECC_Params(__mpz_struct*, __mpz_struct*, __mpz_struct*, eccPoint*, __mpz_struct*)
  0.00      0.03     0.00      256     0.00     0.00  deserialiseCircuit(unsigned char*, int)
  0.00      0.03     0.00      128     0.00     0.00  PVW_OT_Enc_ECC(__mpz_struct*, CRS_ECC*, eccParams*, __gmp_randstate_struct*, PVM_OT_PK_ECC*, unsigned char)
  0.00      0.03     0.00      128     0.00     0.00  senderOT_UC_ECC(int, int, unsigned char*, unsigned char*, int, decParams_ECC*, __gmp_randstate_struct (*) [1])
  0.00      0.03     0.00      128     0.00     0.00  testSender_OT_PVW_ECC()
  0.00      0.03     0.00        4     0.00     0.00  printTiming(timespec*, timespec*, unsigned long, unsigned long, char const*)
  0.00      0.03     0.00        4     0.00     0.00  get_ack(int)
  0.00      0.03     0.00        2     0.00     0.00  getDataAsString(char const*)
  0.00      0.03     0.00        2     0.00     0.00  initGroupStruct()
  0.00      0.03     0.00        2     0.00     0.00  set_up_client_socket(int&, char const*, int, sockaddr_in&)
  0.00      0.03     0.00        1     0.00     0.00  receiveBoth(int, int&)
  0.00      0.03     0.00        1     0.00     0.00  seedRandGen()
  0.00      0.03     0.00        1     0.00     0.00  sendCircuit(int, int, Circuit*)
  0.00      0.03     0.00        1     0.00     0.00  runCircuitExec(Circuit*, int, int, char*)
  0.00      0.03     0.00        1     0.00     0.00  aes_128_encrypt(unsigned char*, unsigned char*, unsigned int*)
  0.00      0.03     0.00        1     0.00     0.00  getPrimeGMP_Alt(__mpz_struct*, __mpz_struct*, __gmp_randstate_struct*, int)
  0.00      0.03     0.00        1     0.00     0.00  runCircuitLocal(Circuit*)
  0.00      0.03     0.00        1     0.00     0.00  readInCircuit_Raw(char*)
  0.00      0.03     0.00        1     0.00     0.00  runCircuitBuilder(Circuit*, int, int)
  0.00      0.03     0.00        1     0.00     0.00  full_CnC_OT_Sender(int, int, Circuit**, __gmp_randstate_struct (*) [1], int, int)
  0.00      0.03     0.00        1     0.00     0.00  builder_side_OT_ECC(int, int, decParams_ECC*, Circuit*, __gmp_randstate_struct (*) [1])
  0.00      0.03     0.00        1     0.00     0.00  encryptMultipleKeys(unsigned char**, int, unsigned char*, int)
  0.00      0.03     0.00        1     0.00     0.00  deserialise_U_V_pair_ECC(unsigned char*, int*)
  0.00      0.03     0.00        1     0.00     0.00  serialise_U_V_Pair_Array_ECC(u_v_Pair_ECC**, int, int*)
  0.00      0.03     0.00        1     0.00     0.00  deserialise_PKs_otKeyPair_ECC_Array(unsigned char*, int)
  0.00      0.03     0.00        1     0.00     0.00  _cygwin_crt0_common

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2014 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 4 byte(s) for 33.33% of 0.03 seconds

index % time    self  children    called     name
                0.01    0.00   14112/31608       testAES() [5]
                0.01    0.00   17496/31608       decryptMultipleKeys(unsigned char**, int, unsigned char*, int) [2]
[1]     66.7    0.02    0.00   31608         aes_128_decrypt(unsigned char*, unsigned char*, unsigned int*) [1]
-----------------------------------------------
                0.00    0.01    8748/8748        freeGateOrWire(gateOrWire*) [3]
[2]     36.9    0.00    0.01    8748         decryptMultipleKeys(unsigned char**, int, unsigned char*, int) [2]
                0.01    0.00   17496/31608       aes_128_decrypt(unsigned char*, unsigned char*, unsigned int*) [1]
                0.00    0.00   17496/24553       decryptionKeySchedule_128(unsigned int*) [75]
-----------------------------------------------
                                                 <spontaneous>
[3]     36.9    0.00    0.01                 freeGateOrWire(gateOrWire*) [3]
                0.00    0.01    8748/8748        decryptMultipleKeys(unsigned char**, int, unsigned char*, int) [2]
-----------------------------------------------
                                                 <spontaneous>
[4]     33.3    0.01    0.00                 ECC_Enc(ECC_PK*, eccPoint*, eccParams*, __gmp_randstate_struct*) [4]
                0.00    0.00   22905/126146      doubleAndAdd_ScalarMul(__mpz_struct*, eccPoint*, eccParams*) [69]
                0.00    0.00   22521/27641       doublePoint(eccPoint*, eccParams*) [73]
-----------------------------------------------
                                                 <spontaneous>
[5]     29.8    0.00    0.01                 testAES() [5]
                0.01    0.00   14112/31608       aes_128_decrypt(unsigned char*, unsigned char*, unsigned int*) [1]
                0.00    0.00    7056/15805       expand_key(unsigned char*) [76]
                0.00    0.00    7056/15805       convertCharStringToUINT(unsigned char*) [77]
                0.00    0.00    7056/24553       decryptionKeySchedule_128(unsigned int*) [75]
-----------------------------------------------
                0.00    0.00     128/126146      senderOT_UC_ECC(int, int, unsigned char*, unsigned char*, int, decParams_ECC*, __gmp_randstate_struct (*) [1]) [87]
                0.00    0.00    5376/126146      randomiseDDH_ECC(ECC_PK*, eccParams*, __gmp_randstate_struct*) [82]
                0.00    0.00   22905/126146      ECC_Enc(ECC_PK*, eccPoint*, eccParams*, __gmp_randstate_struct*) [4]
                0.00    0.00   97737/126146      generate_ECC_KeyPair(eccParams*, __mpz_struct*, __gmp_randstate_struct*) [324]
[69]     0.0    0.00    0.00  126146         doubleAndAdd_ScalarMul(__mpz_struct*, eccPoint*, eccParams*) [69]
-----------------------------------------------
                0.00    0.00     384/96585       randomiseDDH_ECC(ECC_PK*, eccParams*, __gmp_randstate_struct*) [82]
                0.00    0.00   96201/96585       generate_ECC_KeyPair(eccParams*, __mpz_struct*, __gmp_randstate_struct*) [324]
[70]     0.0    0.00    0.00   96585         addEC_Point(eccPoint*, eccPoint*, eccParams*) [70]
-----------------------------------------------
                0.00    0.00   33872/33872       builder_decommitToJ_Set(int, int, Circuit**, secret_builderPRS_Keys*, int, unsigned int*) [377]
[71]     0.0    0.00    0.00   33872         initialiseInputWire_Raw(int) [71]
-----------------------------------------------
                0.00    0.00   33616/33616       sendCircuit(int, int, Circuit*) [96]
[72]     0.0    0.00    0.00   33616         printGateOrWire(gateOrWire*) [72]
-----------------------------------------------
                0.00    0.00     128/27641       senderOT_UC_ECC(int, int, unsigned char*, unsigned char*, int, decParams_ECC*, __gmp_randstate_struct (*) [1]) [87]
                0.00    0.00    4992/27641       randomiseDDH_ECC(ECC_PK*, eccParams*, __gmp_randstate_struct*) [82]
                0.00    0.00   22521/27641       ECC_Enc(ECC_PK*, eccPoint*, eccParams*, __gmp_randstate_struct*) [4]
[73]     0.0    0.00    0.00   27641         doublePoint(eccPoint*, eccParams*) [73]
-----------------------------------------------
                0.00    0.00   24868/24868       builder_side_OT_ECC(int, int, decParams_ECC*, Circuit*, __gmp_randstate_struct (*) [1]) [104]
[74]     0.0    0.00    0.00   24868         new_idAndValue(int, unsigned char) [74]
-----------------------------------------------
                0.00    0.00       1/24553       encryptMultipleKeys(unsigned char**, int, unsigned char*, int) [105]
                0.00    0.00    7056/24553       testAES() [5]
                0.00    0.00   17496/24553       decryptMultipleKeys(unsigned char**, int, unsigned char*, int) [2]
[75]     0.0    0.00    0.00   24553         decryptionKeySchedule_128(unsigned int*) [75]
                0.00    0.00    8749/15805       expand_key(unsigned char*) [76]
                0.00    0.00    8749/15805       convertCharStringToUINT(unsigned char*) [77]
-----------------------------------------------
                0.00    0.00    7056/15805       testAES() [5]
                0.00    0.00    8749/15805       decryptionKeySchedule_128(unsigned int*) [75]
[76]     0.0    0.00    0.00   15805         expand_key(unsigned char*) [76]
-----------------------------------------------
                0.00    0.00    7056/15805       testAES() [5]
                0.00    0.00    8749/15805       decryptionKeySchedule_128(unsigned int*) [75]
[77]     0.0    0.00    0.00   15805         convertCharStringToUINT(unsigned char*) [77]
-----------------------------------------------
                0.00    0.00    8748/8748        builder_side_OT_ECC(int, int, decParams_ECC*, Circuit*, __gmp_randstate_struct (*) [1]) [104]
[78]     0.0    0.00    0.00    8748         garbleOutputTables(Circuit*) [78]
-----------------------------------------------
                0.00    0.00       4/1038        serialise_U_V_Pair_ECC_Array(u_v_Pair_ECC**, int, int*) [434]
                0.00    0.00    1034/1038        deserialiseECC_Params(unsigned char*, int*) [80]
[79]     0.0    0.00    0.00    1038         serialiseMPZ_Array(__mpz_struct (*) [1], int, int*) [79]
-----------------------------------------------
                0.00    0.00       1/517         serialise_U_V_Pair_ECC_Array(u_v_Pair_ECC**, int, int*) [434]
                0.00    0.00       1/517         deserialise_PKs_otKeyPair_ECC_Array(unsigned char*, int) [108]
                0.00    0.00       3/517         sizeOfSerial_ECC_U_V_Pair(u_v_Pair_ECC*) [414]
                0.00    0.00     512/517         testSender_OT_PVW_ECC() [88]
[80]     0.0    0.00    0.00     517         deserialiseECC_Params(unsigned char*, int*) [80]
                0.00    0.00    1034/1038        serialiseMPZ_Array(__mpz_struct (*) [1], int, int*) [79]
-----------------------------------------------
                0.00    0.00     512/512         deserialise_U_V_Pair_Array_ECC(unsigned char*, int) [438]
[81]     0.0    0.00    0.00     512         deserialiseMPZ(unsigned char*, int*) [81]
-----------------------------------------------
                                 384             randomiseDDH_ECC(ECC_PK*, eccParams*, __gmp_randstate_struct*) [82]
                0.00    0.00     128/384         senderOT_UC_ECC(int, int, unsigned char*, unsigned char*, int, decParams_ECC*, __gmp_randstate_struct (*) [1]) [87]
                0.00    0.00     256/384         PVW_OT_Enc_ECC(__mpz_struct*, CRS_ECC*, eccParams*, __gmp_randstate_struct*, PVM_OT_PK_ECC*, unsigned char) [86]
[82]     0.0    0.00    0.00     384+384     randomiseDDH_ECC(ECC_PK*, eccParams*, __gmp_randstate_struct*) [82]
                0.00    0.00    5376/126146      doubleAndAdd_ScalarMul(__mpz_struct*, eccPoint*, eccParams*) [69]
                0.00    0.00    4992/27641       doublePoint(eccPoint*, eccParams*) [73]
                0.00    0.00     384/96585       addEC_Point(eccPoint*, eccPoint*, eccParams*) [70]
                0.00    0.00     384/384         initAndSetECC_Params(__mpz_struct*, __mpz_struct*, __mpz_struct*, eccPoint*, __mpz_struct*) [84]
                0.00    0.00     384/384         initECC_Ciphertext() [83]
                                 384             randomiseDDH_ECC(ECC_PK*, eccParams*, __gmp_randstate_struct*) [82]
-----------------------------------------------
                0.00    0.00     384/384         randomiseDDH_ECC(ECC_PK*, eccParams*, __gmp_randstate_struct*) [82]
[83]     0.0    0.00    0.00     384         initECC_Ciphertext() [83]
-----------------------------------------------
                0.00    0.00     384/384         randomiseDDH_ECC(ECC_PK*, eccParams*, __gmp_randstate_struct*) [82]
[84]     0.0    0.00    0.00     384         initAndSetECC_Params(__mpz_struct*, __mpz_struct*, __mpz_struct*, eccPoint*, __mpz_struct*) [84]
-----------------------------------------------
                0.00    0.00     256/256         sendCircuit(int, int, Circuit*) [96]
[85]     0.0    0.00    0.00     256         deserialiseCircuit(unsigned char*, int) [85]
-----------------------------------------------
                0.00    0.00     128/128         receiveGatesOfCircuitAlt(int, int, int) [403]
[86]     0.0    0.00    0.00     128         PVW_OT_Enc_ECC(__mpz_struct*, CRS_ECC*, eccParams*, __gmp_randstate_struct*, PVM_OT_PK_ECC*, unsigned char) [86]
                0.00    0.00     256/384         randomiseDDH_ECC(ECC_PK*, eccParams*, __gmp_randstate_struct*) [82]
-----------------------------------------------
                0.00    0.00     128/128         testSender_OT_PVW_ECC() [88]
[87]     0.0    0.00    0.00     128         senderOT_UC_ECC(int, int, unsigned char*, unsigned char*, int, decParams_ECC*, __gmp_randstate_struct (*) [1]) [87]
                0.00    0.00     128/384         randomiseDDH_ECC(ECC_PK*, eccParams*, __gmp_randstate_struct*) [82]
                0.00    0.00     128/27641       doublePoint(eccPoint*, eccParams*) [73]
                0.00    0.00     128/126146      doubleAndAdd_ScalarMul(__mpz_struct*, eccPoint*, eccParams*) [69]
-----------------------------------------------
                0.00    0.00     128/128         receiveGatesOfCircuitAlt(int, int, int) [403]
[88]     0.0    0.00    0.00     128         testSender_OT_PVW_ECC() [88]
                0.00    0.00     512/517         deserialiseECC_Params(unsigned char*, int*) [80]
                0.00    0.00     128/128         senderOT_UC_ECC(int, int, unsigned char*, unsigned char*, int, decParams_ECC*, __gmp_randstate_struct (*) [1]) [87]
-----------------------------------------------
                0.00    0.00       1/4           builder_side_OT_ECC(int, int, decParams_ECC*, Circuit*, __gmp_randstate_struct (*) [1]) [104]
                0.00    0.00       1/4           sendCircuit(int, int, Circuit*) [96]
                0.00    0.00       1/4           sendPublicCommitments(int, int, public_builderPRS_Keys*, DDH_Group*) [354]
                0.00    0.00       1/4           builder_decommitToJ_Set(int, int, Circuit**, secret_builderPRS_Keys*, int, unsigned int*) [377]
[89]     0.0    0.00    0.00       4         printTiming(timespec*, timespec*, unsigned long, unsigned long, char const*) [89]
-----------------------------------------------
                0.00    0.00       1/4           receiveExecOrder(int, int, int) [244]
                0.00    0.00       1/4           sendCircuit(int, int, Circuit*) [96]
                0.00    0.00       2/4           initGroupStruct() [92]
[90]     0.0    0.00    0.00       4         get_ack(int) [90]
-----------------------------------------------
                0.00    0.00       1/2           seedRandGen() [95]
                0.00    0.00       1/2           getPrimeGMP(__mpz_struct*, __gmp_randstate_struct*, int) [128]
[91]     0.0    0.00    0.00       2         getDataAsString(char const*) [91]
-----------------------------------------------
                0.00    0.00       1/2           deserialise_PKs_otKeyPair_ECC_Array(unsigned char*, int) [108]
                0.00    0.00       1/2           sizeOfSerial_ECC_U_V_Pair(u_v_Pair_ECC*) [414]
[92]     0.0    0.00    0.00       2         initGroupStruct() [92]
                0.00    0.00       2/4           get_ack(int) [90]
-----------------------------------------------
                0.00    0.00       2/2           full_CnC_OT_Sender(int, int, Circuit**, __gmp_randstate_struct (*) [1], int, int) [103]
[93]     0.0    0.00    0.00       2         set_up_client_socket(int&, char const*, int, sockaddr_in&) [93]
-----------------------------------------------
                0.00    0.00       1/1           receiveExecOrder(int, int, int) [244]
[94]     0.0    0.00    0.00       1         receiveBoth(int, int&) [94]
-----------------------------------------------
                0.00    0.00       1/1           builder_decommitToJ_Set(int, int, Circuit**, secret_builderPRS_Keys*, int, unsigned int*) [377]
[95]     0.0    0.00    0.00       1         seedRandGen() [95]
                0.00    0.00       1/2           getDataAsString(char const*) [91]
-----------------------------------------------
                0.00    0.00       1/1           sendPublicCommitments(int, int, public_builderPRS_Keys*, DDH_Group*) [354]
[96]     0.0    0.00    0.00       1         sendCircuit(int, int, Circuit*) [96]
                0.00    0.00   33616/33616       printGateOrWire(gateOrWire*) [72]
                0.00    0.00     256/256         deserialiseCircuit(unsigned char*, int) [85]
                0.00    0.00       1/4           printTiming(timespec*, timespec*, unsigned long, unsigned long, char const*) [89]
                0.00    0.00       1/4           get_ack(int) [90]
-----------------------------------------------
                0.00    0.00       1/1           sendPublicCommitments(int, int, public_builderPRS_Keys*, DDH_Group*) [354]
[97]     0.0    0.00    0.00       1         runCircuitExec(Circuit*, int, int, char*) [97]
-----------------------------------------------
                0.00    0.00       1/1           encryptMultipleKeys(unsigned char**, int, unsigned char*, int) [105]
[98]     0.0    0.00    0.00       1         aes_128_encrypt(unsigned char*, unsigned char*, unsigned int*) [98]
-----------------------------------------------
                0.00    0.00       1/1           sendPublicCommitments(int, int, public_builderPRS_Keys*, DDH_Group*) [354]
[99]     0.0    0.00    0.00       1         getPrimeGMP_Alt(__mpz_struct*, __mpz_struct*, __gmp_randstate_struct*, int) [99]
-----------------------------------------------
                0.00    0.00       1/1           builder_decommitToJ_Set(int, int, Circuit**, secret_builderPRS_Keys*, int, unsigned int*) [377]
[100]    0.0    0.00    0.00       1         runCircuitLocal(Circuit*) [100]
-----------------------------------------------
                0.00    0.00       1/1           sendPublicCommitments(int, int, public_builderPRS_Keys*, DDH_Group*) [354]
[101]    0.0    0.00    0.00       1         readInCircuit_Raw(char*) [101]
-----------------------------------------------
                0.00    0.00       1/1           checkForSignalBit(unsigned char*) [251]
[102]    0.0    0.00    0.00       1         runCircuitBuilder(Circuit*, int, int) [102]
-----------------------------------------------
                0.00    0.00       1/1           _cygwin_dll_entry [545]
[103]    0.0    0.00    0.00       1         full_CnC_OT_Sender(int, int, Circuit**, __gmp_randstate_struct (*) [1], int, int) [103]
                0.00    0.00       2/2           set_up_client_socket(int&, char const*, int, sockaddr_in&) [93]
-----------------------------------------------
                0.00    0.00       1/1           builder_decommitToJ_Set(int, int, Circuit**, secret_builderPRS_Keys*, int, unsigned int*) [377]
[104]    0.0    0.00    0.00       1         builder_side_OT_ECC(int, int, decParams_ECC*, Circuit*, __gmp_randstate_struct (*) [1]) [104]
                0.00    0.00   24868/24868       new_idAndValue(int, unsigned char) [74]
                0.00    0.00    8748/8748        garbleOutputTables(Circuit*) [78]
                0.00    0.00       1/4           printTiming(timespec*, timespec*, unsigned long, unsigned long, char const*) [89]
-----------------------------------------------
                0.00    0.00       1/1           getPrimeGMP(__mpz_struct*, __gmp_randstate_struct*, int) [128]
[105]    0.0    0.00    0.00       1         encryptMultipleKeys(unsigned char**, int, unsigned char*, int) [105]
                0.00    0.00       1/24553       decryptionKeySchedule_128(unsigned int*) [75]
                0.00    0.00       1/1           aes_128_encrypt(unsigned char*, unsigned char*, unsigned int*) [98]
-----------------------------------------------
                0.00    0.00       1/1           sizeOfSerial_ECC_U_V_Pair(u_v_Pair_ECC*) [414]
[106]    0.0    0.00    0.00       1         deserialise_U_V_pair_ECC(unsigned char*, int*) [106]
-----------------------------------------------
                0.00    0.00       1/1           receiveExecOrder(int, int, int) [244]
[107]    0.0    0.00    0.00       1         serialise_U_V_Pair_Array_ECC(u_v_Pair_ECC**, int, int*) [107]
-----------------------------------------------
                0.00    0.00       1/1           sendPublicCommitments(int, int, public_builderPRS_Keys*, DDH_Group*) [354]
[108]    0.0    0.00    0.00       1         deserialise_PKs_otKeyPair_ECC_Array(unsigned char*, int) [108]
                0.00    0.00       1/2           initGroupStruct() [92]
                0.00    0.00       1/517         deserialiseECC_Params(unsigned char*, int*) [80]
-----------------------------------------------
                0.00    0.00       1/1           ___DTOR_LIST__ [495]
[109]    0.0    0.00    0.00       1         _cygwin_crt0_common [109]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2014 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

  [76] expand_key(unsigned char*) [92] initGroupStruct()  [84] initAndSetECC_Params(__mpz_struct*, __mpz_struct*, __mpz_struct*, eccPoint*, __mpz_struct*)
  [70] addEC_Point(eccPoint*, eccPoint*, eccParams*) [72] printGateOrWire(gateOrWire*) [93] set_up_client_socket(int&, char const*, int, sockaddr_in&)
  [73] doublePoint(eccPoint*, eccParams*) [100] runCircuitLocal(Circuit*) [80] deserialiseECC_Params(unsigned char*, int*)
  [89] printTiming(timespec*, timespec*, unsigned long, unsigned long, char const*) [87] senderOT_UC_ECC(int, int, unsigned char*, unsigned char*, int, decParams_ECC*, __gmp_randstate_struct (*) [1]) [88] testSender_OT_PVW_ECC()
  [94] receiveBoth(int, int&) [82] randomiseDDH_ECC(ECC_PK*, eccParams*, __gmp_randstate_struct*) [69] doubleAndAdd_ScalarMul(__mpz_struct*, eccPoint*, eccParams*)
  [95] seedRandGen()         [101] readInCircuit_Raw(char*) [77] convertCharStringToUINT(unsigned char*)
  [96] sendCircuit(int, int, Circuit*) [102] runCircuitBuilder(Circuit*, int, int) [71] initialiseInputWire_Raw(int)
  [86] PVW_OT_Enc_ECC(__mpz_struct*, CRS_ECC*, eccParams*, __gmp_randstate_struct*, PVM_OT_PK_ECC*, unsigned char) [85] deserialiseCircuit(unsigned char*, int) [106] deserialise_U_V_pair_ECC(unsigned char*, int*)
  [81] deserialiseMPZ(unsigned char*, int*) [103] full_CnC_OT_Sender(int, int, Circuit**, __gmp_randstate_struct (*) [1], int, int) [75] decryptionKeySchedule_128(unsigned int*)
  [74] new_idAndValue(int, unsigned char) [78] garbleOutputTables(Circuit*) [107] serialise_U_V_Pair_Array_ECC(u_v_Pair_ECC**, int, int*)
  [97] runCircuitExec(Circuit*, int, int, char*) [83] initECC_Ciphertext() [108] deserialise_PKs_otKeyPair_ECC_Array(unsigned char*, int)
   [1] aes_128_decrypt(unsigned char*, unsigned char*, unsigned int*) [79] serialiseMPZ_Array(__mpz_struct (*) [1], int, int*) [4] ECC_Enc(ECC_PK*, eccPoint*, eccParams*, __gmp_randstate_struct*)
  [98] aes_128_encrypt(unsigned char*, unsigned char*, unsigned int*) [104] builder_side_OT_ECC(int, int, decParams_ECC*, Circuit*, __gmp_randstate_struct (*) [1]) [90] get_ack(int)
  [91] getDataAsString(char const*) [2] decryptMultipleKeys(unsigned char**, int, unsigned char*, int) [109] _cygwin_crt0_common
  [99] getPrimeGMP_Alt(__mpz_struct*, __mpz_struct*, __gmp_randstate_struct*, int) [105] encryptMultipleKeys(unsigned char**, int, unsigned char*, int)
