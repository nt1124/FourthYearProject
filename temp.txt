Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 50.00      0.01     0.01    24868     0.00     0.00  freeXOR_Gate(gateOrWire*, gateOrWire**)
 50.00      0.02     0.01        1    10.00    10.00  receiveGatesOfCircuit(unsigned char*, int)
  0.00      0.02     0.00    97668     0.00     0.00  groupOp_Equal_Y_NotZero(eccPoint*, eccPoint*, eccParams*)
  0.00      0.02     0.00    49358     0.00     0.00  groupOp(eccPoint*, eccPoint*, eccParams*)
  0.00      0.02     0.00    48974     0.00     0.00  addEC_Point(eccPoint*, eccPoint*, eccParams*)
  0.00      0.02     0.00    33872     0.00     0.00  freeGateOrWire(gateOrWire*)
  0.00      0.02     0.00    33616     0.00     0.00  deserialiseGate(gate**, unsigned char*, int)
  0.00      0.02     0.00    31608     0.00     0.00  aes_128_decrypt(unsigned char*, unsigned char*, unsigned int*)
  0.00      0.02     0.00    15805     0.00     0.00  expand_key(unsigned char*)
  0.00      0.02     0.00    15805     0.00     0.00  convertCharStringToUINT(unsigned char*)
  0.00      0.02     0.00    15804     0.00     0.00  decryptionKeySchedule_128(unsigned int*)
  0.00      0.02     0.00     8749     0.00     0.00  getUintKeySchedule(unsigned char*)
  0.00      0.02     0.00     8748     0.00     0.00  decryptGate(gateOrWire*, gateOrWire**)
  0.00      0.02     0.00     8748     0.00     0.00  decryptMultipleKeys(unsigned char**, int, unsigned char*, int)
  0.00      0.02     0.00     1038     0.00     0.00  deserialiseMPZ(unsigned char*, int*)
  0.00      0.02     0.00      517     0.00     0.00  deserialise_ECC_Point(unsigned char*, int*)
  0.00      0.02     0.00      512     0.00     0.00  serialiseMPZ(__mpz_struct*, unsigned char*, int*)
  0.00      0.02     0.00      384     0.00     0.00  copyECC_Point(eccPoint*)
  0.00      0.02     0.00      384     0.00     0.00  doubleAndAdd_ScalarMul(__mpz_struct*, eccPoint*, eccParams*)
  0.00      0.02     0.00      256     0.00     0.00  deserialiseInputWire(gateOrWire*, unsigned char*, int)
  0.00      0.02     0.00      128     0.00     0.00  keyGen_ECC(CRS_ECC*, unsigned char, eccParams*, __gmp_randstate_struct*)
  0.00      0.02     0.00      128     0.00     0.00  PVW_OT_Dec_ECC(u_v_Pair_ECC*, CRS_ECC*, eccParams*, __mpz_struct*)
  0.00      0.02     0.00      128     0.00     0.00  bulk_two_receiverOT_UC_ECC(unsigned char*, int*, otKeyPair_ECC*, decParams_ECC*, unsigned char, int*)
  0.00      0.02     0.00        4     0.00     0.00  receiveInt(int)
  0.00      0.02     0.00        4     0.00     0.00  printTiming(timespec*, timespec*, unsigned long, unsigned long, char const*)
  0.00      0.02     0.00        2     0.00     0.00  receiveBoth(int, int&)
  0.00      0.02     0.00        2     0.00     0.00  getDataAsString(char const*)
  0.00      0.02     0.00        2     0.00     0.00  set_up_client_socket(int&, char const*, int, sockaddr_in&)
  0.00      0.02     0.00        1     0.00    20.00  runProtocol(char*, char*, char*, char*, int)
  0.00      0.02     0.00        1     0.00     0.00  seedRandGen()
  0.00      0.02     0.00        1     0.00    10.00  runCircuitExec(Circuit*, int, int, char*)
  0.00      0.02     0.00        1     0.00    20.00  runExecutor_SH(char*, char*, char*)
  0.00      0.02     0.00        1     0.00     0.00  aes_128_encrypt(unsigned char*, unsigned char*, unsigned int*)
  0.00      0.02     0.00        1     0.00    10.00  receiveFullCircuit(int, int)
  0.00      0.02     0.00        1     0.00     0.00  testAES_FromRandom()
  0.00      0.02     0.00        1     0.00     0.00  encryptMultipleKeys(unsigned char**, int, unsigned char*, int)
  0.00      0.02     0.00        1     0.00     0.00  executor_side_OT_ECC(int, int, decParams_ECC*, Circuit*, __gmp_randstate_struct (*) [1])
  0.00      0.02     0.00        1     0.00     0.00  printOutputHexString(Circuit*)
  0.00      0.02     0.00        1     0.00     0.00  receiveDecParams_ECC(int, int)
  0.00      0.02     0.00        1     0.00     0.00  deserialiseECC_Params(unsigned char*, int*)
  0.00      0.02     0.00        1     0.00     0.00  readInputDetailsFile_Alt(char*)
  0.00      0.02     0.00        1     0.00     0.00  serialise_PKs_otKeyPair_ECC_Array(otKeyPair_ECC**, int, int*)
  0.00      0.02     0.00        1     0.00     0.00  sendInt(int, int)

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2014 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 4 byte(s) for 50.00% of 0.02 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.02                 main [1]
                0.00    0.02       1/1           runProtocol(char*, char*, char*, char*, int) [2]
-----------------------------------------------
                0.00    0.02       1/1           main [1]
[2]    100.0    0.00    0.02       1         runProtocol(char*, char*, char*, char*, int) [2]
                0.00    0.02       1/1           runExecutor_SH(char*, char*, char*) [3]
-----------------------------------------------
                0.00    0.02       1/1           runProtocol(char*, char*, char*, char*, int) [2]
[3]    100.0    0.00    0.02       1         runExecutor_SH(char*, char*, char*) [3]
                0.00    0.01       1/1           receiveFullCircuit(int, int) [6]
                0.00    0.01       1/1           runCircuitExec(Circuit*, int, int, char*) [5]
                0.00    0.00   33872/33872       freeGateOrWire(gateOrWire*) [97]
                0.00    0.00       2/2           set_up_client_socket(int&, char const*, int, sockaddr_in&) [119]
                0.00    0.00       2/4           printTiming(timespec*, timespec*, unsigned long, unsigned long, char const*) [116]
                0.00    0.00       1/1           readInputDetailsFile_Alt(char*) [128]
                0.00    0.00       1/1           seedRandGen() [120]
                0.00    0.00       1/1           receiveDecParams_ECC(int, int) [126]
                0.00    0.00       1/1           executor_side_OT_ECC(int, int, decParams_ECC*, Circuit*, __gmp_randstate_struct (*) [1]) [124]
                0.00    0.00       1/1           printOutputHexString(Circuit*) [125]
                0.00    0.00       1/1           testAES_FromRandom() [122]
-----------------------------------------------
                0.01    0.00   24868/24868       runCircuitExec(Circuit*, int, int, char*) [5]
[4]     50.0    0.01    0.00   24868         freeXOR_Gate(gateOrWire*, gateOrWire**) [4]
-----------------------------------------------
                0.00    0.01       1/1           runExecutor_SH(char*, char*, char*) [3]
[5]     50.0    0.00    0.01       1         runCircuitExec(Circuit*, int, int, char*) [5]
                0.01    0.00   24868/24868       freeXOR_Gate(gateOrWire*, gateOrWire**) [4]
                0.00    0.00    8748/8748        decryptGate(gateOrWire*, gateOrWire**) [104]
                0.00    0.00       1/4           printTiming(timespec*, timespec*, unsigned long, unsigned long, char const*) [116]
-----------------------------------------------
                0.00    0.01       1/1           runExecutor_SH(char*, char*, char*) [3]
[6]     50.0    0.00    0.01       1         receiveFullCircuit(int, int) [6]
                0.01    0.00       1/1           receiveGatesOfCircuit(unsigned char*, int) [7]
                0.00    0.00       1/4           receiveInt(int) [115]
-----------------------------------------------
                0.01    0.00       1/1           receiveFullCircuit(int, int) [6]
[7]     50.0    0.01    0.00       1         receiveGatesOfCircuit(unsigned char*, int) [7]
                0.00    0.00   33616/33616       deserialiseGate(gate**, unsigned char*, int) [98]
                0.00    0.00     256/256         deserialiseInputWire(gateOrWire*, unsigned char*, int) [111]
                0.00    0.00       1/4           printTiming(timespec*, timespec*, unsigned long, unsigned long, char const*) [116]
-----------------------------------------------
                0.00    0.00   97668/97668       doubleAndAdd_ScalarMul(__mpz_struct*, eccPoint*, eccParams*) [110]
[94]     0.0    0.00    0.00   97668         groupOp_Equal_Y_NotZero(eccPoint*, eccPoint*, eccParams*) [94]
-----------------------------------------------
                0.00    0.00     128/49358       PVW_OT_Dec_ECC(u_v_Pair_ECC*, CRS_ECC*, eccParams*, __mpz_struct*) [113]
                0.00    0.00   49230/49358       doubleAndAdd_ScalarMul(__mpz_struct*, eccPoint*, eccParams*) [110]
[95]     0.0    0.00    0.00   49358         groupOp(eccPoint*, eccPoint*, eccParams*) [95]
-----------------------------------------------
                0.00    0.00     128/48974       PVW_OT_Dec_ECC(u_v_Pair_ECC*, CRS_ECC*, eccParams*, __mpz_struct*) [113]
                0.00    0.00   48846/48974       doubleAndAdd_ScalarMul(__mpz_struct*, eccPoint*, eccParams*) [110]
[96]     0.0    0.00    0.00   48974         addEC_Point(eccPoint*, eccPoint*, eccParams*) [96]
-----------------------------------------------
                0.00    0.00   33872/33872       runExecutor_SH(char*, char*, char*) [3]
[97]     0.0    0.00    0.00   33872         freeGateOrWire(gateOrWire*) [97]
-----------------------------------------------
                0.00    0.00   33616/33616       receiveGatesOfCircuit(unsigned char*, int) [7]
[98]     0.0    0.00    0.00   33616         deserialiseGate(gate**, unsigned char*, int) [98]
-----------------------------------------------
                0.00    0.00   31608/31608       decryptMultipleKeys(unsigned char**, int, unsigned char*, int) [105]
[99]     0.0    0.00    0.00   31608         aes_128_decrypt(unsigned char*, unsigned char*, unsigned int*) [99]
-----------------------------------------------
                0.00    0.00    7056/15805       decryptMultipleKeys(unsigned char**, int, unsigned char*, int) [105]
                0.00    0.00    8749/15805       getUintKeySchedule(unsigned char*) [103]
[100]    0.0    0.00    0.00   15805         expand_key(unsigned char*) [100]
-----------------------------------------------
                0.00    0.00    7056/15805       decryptMultipleKeys(unsigned char**, int, unsigned char*, int) [105]
                0.00    0.00    8749/15805       getUintKeySchedule(unsigned char*) [103]
[101]    0.0    0.00    0.00   15805         convertCharStringToUINT(unsigned char*) [101]
-----------------------------------------------
                0.00    0.00   15804/15804       decryptMultipleKeys(unsigned char**, int, unsigned char*, int) [105]
[102]    0.0    0.00    0.00   15804         decryptionKeySchedule_128(unsigned int*) [102]
-----------------------------------------------
                0.00    0.00       1/8749        encryptMultipleKeys(unsigned char**, int, unsigned char*, int) [123]
                0.00    0.00    8748/8749        decryptMultipleKeys(unsigned char**, int, unsigned char*, int) [105]
[103]    0.0    0.00    0.00    8749         getUintKeySchedule(unsigned char*) [103]
                0.00    0.00    8749/15805       expand_key(unsigned char*) [100]
                0.00    0.00    8749/15805       convertCharStringToUINT(unsigned char*) [101]
-----------------------------------------------
                0.00    0.00    8748/8748        runCircuitExec(Circuit*, int, int, char*) [5]
[104]    0.0    0.00    0.00    8748         decryptGate(gateOrWire*, gateOrWire**) [104]
                0.00    0.00    8748/8748        decryptMultipleKeys(unsigned char**, int, unsigned char*, int) [105]
-----------------------------------------------
                0.00    0.00    8748/8748        decryptGate(gateOrWire*, gateOrWire**) [104]
[105]    0.0    0.00    0.00    8748         decryptMultipleKeys(unsigned char**, int, unsigned char*, int) [105]
                0.00    0.00   31608/31608       aes_128_decrypt(unsigned char*, unsigned char*, unsigned int*) [99]
                0.00    0.00   15804/15804       decryptionKeySchedule_128(unsigned int*) [102]
                0.00    0.00    8748/8749        getUintKeySchedule(unsigned char*) [103]
                0.00    0.00    7056/15805       expand_key(unsigned char*) [100]
                0.00    0.00    7056/15805       convertCharStringToUINT(unsigned char*) [101]
-----------------------------------------------
                0.00    0.00       4/1038        deserialiseECC_Params(unsigned char*, int*) [127]
                0.00    0.00    1034/1038        deserialise_ECC_Point(unsigned char*, int*) [107]
[106]    0.0    0.00    0.00    1038         deserialiseMPZ(unsigned char*, int*) [106]
-----------------------------------------------
                0.00    0.00       1/517         deserialiseECC_Params(unsigned char*, int*) [127]
                0.00    0.00       4/517         receiveDecParams_ECC(int, int) [126]
                0.00    0.00     512/517         bulk_two_receiverOT_UC_ECC(unsigned char*, int*, otKeyPair_ECC*, decParams_ECC*, unsigned char, int*) [114]
[107]    0.0    0.00    0.00     517         deserialise_ECC_Point(unsigned char*, int*) [107]
                0.00    0.00    1034/1038        deserialiseMPZ(unsigned char*, int*) [106]
-----------------------------------------------
                0.00    0.00     512/512         serialise_PKs_otKeyPair_ECC_Array(otKeyPair_ECC**, int, int*) [129]
[108]    0.0    0.00    0.00     512         serialiseMPZ(__mpz_struct*, unsigned char*, int*) [108]
-----------------------------------------------
                0.00    0.00     384/384         doubleAndAdd_ScalarMul(__mpz_struct*, eccPoint*, eccParams*) [110]
[109]    0.0    0.00    0.00     384         copyECC_Point(eccPoint*) [109]
-----------------------------------------------
                0.00    0.00     128/384         PVW_OT_Dec_ECC(u_v_Pair_ECC*, CRS_ECC*, eccParams*, __mpz_struct*) [113]
                0.00    0.00     256/384         keyGen_ECC(CRS_ECC*, unsigned char, eccParams*, __gmp_randstate_struct*) [112]
[110]    0.0    0.00    0.00     384         doubleAndAdd_ScalarMul(__mpz_struct*, eccPoint*, eccParams*) [110]
                0.00    0.00   97668/97668       groupOp_Equal_Y_NotZero(eccPoint*, eccPoint*, eccParams*) [94]
                0.00    0.00   49230/49358       groupOp(eccPoint*, eccPoint*, eccParams*) [95]
                0.00    0.00   48846/48974       addEC_Point(eccPoint*, eccPoint*, eccParams*) [96]
                0.00    0.00     384/384         copyECC_Point(eccPoint*) [109]
-----------------------------------------------
                0.00    0.00     256/256         receiveGatesOfCircuit(unsigned char*, int) [7]
[111]    0.0    0.00    0.00     256         deserialiseInputWire(gateOrWire*, unsigned char*, int) [111]
-----------------------------------------------
                0.00    0.00     128/128         executor_side_OT_ECC(int, int, decParams_ECC*, Circuit*, __gmp_randstate_struct (*) [1]) [124]
[112]    0.0    0.00    0.00     128         keyGen_ECC(CRS_ECC*, unsigned char, eccParams*, __gmp_randstate_struct*) [112]
                0.00    0.00     256/384         doubleAndAdd_ScalarMul(__mpz_struct*, eccPoint*, eccParams*) [110]
-----------------------------------------------
                0.00    0.00     128/128         bulk_two_receiverOT_UC_ECC(unsigned char*, int*, otKeyPair_ECC*, decParams_ECC*, unsigned char, int*) [114]
[113]    0.0    0.00    0.00     128         PVW_OT_Dec_ECC(u_v_Pair_ECC*, CRS_ECC*, eccParams*, __mpz_struct*) [113]
                0.00    0.00     128/384         doubleAndAdd_ScalarMul(__mpz_struct*, eccPoint*, eccParams*) [110]
                0.00    0.00     128/48974       addEC_Point(eccPoint*, eccPoint*, eccParams*) [96]
                0.00    0.00     128/49358       groupOp(eccPoint*, eccPoint*, eccParams*) [95]
-----------------------------------------------
                0.00    0.00     128/128         executor_side_OT_ECC(int, int, decParams_ECC*, Circuit*, __gmp_randstate_struct (*) [1]) [124]
[114]    0.0    0.00    0.00     128         bulk_two_receiverOT_UC_ECC(unsigned char*, int*, otKeyPair_ECC*, decParams_ECC*, unsigned char, int*) [114]
                0.00    0.00     512/517         deserialise_ECC_Point(unsigned char*, int*) [107]
                0.00    0.00     128/128         PVW_OT_Dec_ECC(u_v_Pair_ECC*, CRS_ECC*, eccParams*, __mpz_struct*) [113]
-----------------------------------------------
                0.00    0.00       1/4           executor_side_OT_ECC(int, int, decParams_ECC*, Circuit*, __gmp_randstate_struct (*) [1]) [124]
                0.00    0.00       1/4           receiveFullCircuit(int, int) [6]
                0.00    0.00       2/4           receiveBoth(int, int&) [117]
[115]    0.0    0.00    0.00       4         receiveInt(int) [115]
-----------------------------------------------
                0.00    0.00       1/4           runCircuitExec(Circuit*, int, int, char*) [5]
                0.00    0.00       1/4           receiveGatesOfCircuit(unsigned char*, int) [7]
                0.00    0.00       2/4           runExecutor_SH(char*, char*, char*) [3]
[116]    0.0    0.00    0.00       4         printTiming(timespec*, timespec*, unsigned long, unsigned long, char const*) [116]
-----------------------------------------------
                0.00    0.00       2/2           receiveDecParams_ECC(int, int) [126]
[117]    0.0    0.00    0.00       2         receiveBoth(int, int&) [117]
                0.00    0.00       2/4           receiveInt(int) [115]
-----------------------------------------------
                0.00    0.00       2/2           testAES_FromRandom() [122]
[118]    0.0    0.00    0.00       2         getDataAsString(char const*) [118]
-----------------------------------------------
                0.00    0.00       2/2           runExecutor_SH(char*, char*, char*) [3]
[119]    0.0    0.00    0.00       2         set_up_client_socket(int&, char const*, int, sockaddr_in&) [119]
-----------------------------------------------
                0.00    0.00       1/1           runExecutor_SH(char*, char*, char*) [3]
[120]    0.0    0.00    0.00       1         seedRandGen() [120]
-----------------------------------------------
                0.00    0.00       1/1           encryptMultipleKeys(unsigned char**, int, unsigned char*, int) [123]
[121]    0.0    0.00    0.00       1         aes_128_encrypt(unsigned char*, unsigned char*, unsigned int*) [121]
-----------------------------------------------
                0.00    0.00       1/1           runExecutor_SH(char*, char*, char*) [3]
[122]    0.0    0.00    0.00       1         testAES_FromRandom() [122]
                0.00    0.00       2/2           getDataAsString(char const*) [118]
                0.00    0.00       1/1           encryptMultipleKeys(unsigned char**, int, unsigned char*, int) [123]
-----------------------------------------------
                0.00    0.00       1/1           testAES_FromRandom() [122]
[123]    0.0    0.00    0.00       1         encryptMultipleKeys(unsigned char**, int, unsigned char*, int) [123]
                0.00    0.00       1/8749        getUintKeySchedule(unsigned char*) [103]
                0.00    0.00       1/1           aes_128_encrypt(unsigned char*, unsigned char*, unsigned int*) [121]
-----------------------------------------------
                0.00    0.00       1/1           runExecutor_SH(char*, char*, char*) [3]
[124]    0.0    0.00    0.00       1         executor_side_OT_ECC(int, int, decParams_ECC*, Circuit*, __gmp_randstate_struct (*) [1]) [124]
                0.00    0.00     128/128         keyGen_ECC(CRS_ECC*, unsigned char, eccParams*, __gmp_randstate_struct*) [112]
                0.00    0.00     128/128         bulk_two_receiverOT_UC_ECC(unsigned char*, int*, otKeyPair_ECC*, decParams_ECC*, unsigned char, int*) [114]
                0.00    0.00       1/1           serialise_PKs_otKeyPair_ECC_Array(otKeyPair_ECC**, int, int*) [129]
                0.00    0.00       1/1           sendInt(int, int) [130]
                0.00    0.00       1/4           receiveInt(int) [115]
-----------------------------------------------
                0.00    0.00       1/1           runExecutor_SH(char*, char*, char*) [3]
[125]    0.0    0.00    0.00       1         printOutputHexString(Circuit*) [125]
-----------------------------------------------
                0.00    0.00       1/1           runExecutor_SH(char*, char*, char*) [3]
[126]    0.0    0.00    0.00       1         receiveDecParams_ECC(int, int) [126]
                0.00    0.00       4/517         deserialise_ECC_Point(unsigned char*, int*) [107]
                0.00    0.00       2/2           receiveBoth(int, int&) [117]
                0.00    0.00       1/1           deserialiseECC_Params(unsigned char*, int*) [127]
-----------------------------------------------
                0.00    0.00       1/1           receiveDecParams_ECC(int, int) [126]
[127]    0.0    0.00    0.00       1         deserialiseECC_Params(unsigned char*, int*) [127]
                0.00    0.00       4/1038        deserialiseMPZ(unsigned char*, int*) [106]
                0.00    0.00       1/517         deserialise_ECC_Point(unsigned char*, int*) [107]
-----------------------------------------------
                0.00    0.00       1/1           runExecutor_SH(char*, char*, char*) [3]
[128]    0.0    0.00    0.00       1         readInputDetailsFile_Alt(char*) [128]
-----------------------------------------------
                0.00    0.00       1/1           executor_side_OT_ECC(int, int, decParams_ECC*, Circuit*, __gmp_randstate_struct (*) [1]) [124]
[129]    0.0    0.00    0.00       1         serialise_PKs_otKeyPair_ECC_Array(otKeyPair_ECC**, int, int*) [129]
                0.00    0.00     512/512         serialiseMPZ(__mpz_struct*, unsigned char*, int*) [108]
-----------------------------------------------
                0.00    0.00       1/1           executor_side_OT_ECC(int, int, decParams_ECC*, Circuit*, __gmp_randstate_struct (*) [1]) [124]
[130]    0.0    0.00    0.00       1         sendInt(int, int) [130]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2014 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

 [100] expand_key(unsigned char*) [5] runCircuitExec(Circuit*, int, int, char*) [119] set_up_client_socket(int&, char const*, int, sockaddr_in&)
 [112] keyGen_ECC(CRS_ECC*, unsigned char, eccParams*, __gmp_randstate_struct*) [3] runExecutor_SH(char*, char*, char*) [127] deserialiseECC_Params(unsigned char*, int*)
 [115] receiveInt(int)        [99] aes_128_decrypt(unsigned char*, unsigned char*, unsigned int*) [107] deserialise_ECC_Point(unsigned char*, int*)
  [96] addEC_Point(eccPoint*, eccPoint*, eccParams*) [121] aes_128_encrypt(unsigned char*, unsigned char*, unsigned int*) [7] receiveGatesOfCircuit(unsigned char*, int)
 [104] decryptGate(gateOrWire*, gateOrWire**) [98] deserialiseGate(gate**, unsigned char*, int) [110] doubleAndAdd_ScalarMul(__mpz_struct*, eccPoint*, eccParams*)
 [116] printTiming(timespec*, timespec*, unsigned long, unsigned long, char const*) [118] getDataAsString(char const*) [101] convertCharStringToUINT(unsigned char*)
 [117] receiveBoth(int, int&) [103] getUintKeySchedule(unsigned char*) [94] groupOp_Equal_Y_NotZero(eccPoint*, eccPoint*, eccParams*)
   [2] runProtocol(char*, char*, char*, char*, int) [6] receiveFullCircuit(int, int) [128] readInputDetailsFile_Alt(char*)
 [120] seedRandGen()         [122] testAES_FromRandom()  [102] decryptionKeySchedule_128(unsigned int*)
   [4] freeXOR_Gate(gateOrWire*, gateOrWire**) [105] decryptMultipleKeys(unsigned char**, int, unsigned char*, int) [114] bulk_two_receiverOT_UC_ECC(unsigned char*, int*, otKeyPair_ECC*, decParams_ECC*, unsigned char, int*)
 [108] serialiseMPZ(__mpz_struct*, unsigned char*, int*) [123] encryptMultipleKeys(unsigned char**, int, unsigned char*, int) [129] serialise_PKs_otKeyPair_ECC_Array(otKeyPair_ECC**, int, int*)
 [109] copyECC_Point(eccPoint*) [111] deserialiseInputWire(gateOrWire*, unsigned char*, int) [95] groupOp(eccPoint*, eccPoint*, eccParams*)
 [113] PVW_OT_Dec_ECC(u_v_Pair_ECC*, CRS_ECC*, eccParams*, __mpz_struct*) [124] executor_side_OT_ECC(int, int, decParams_ECC*, Circuit*, __gmp_randstate_struct (*) [1]) [130] sendInt(int, int)
 [106] deserialiseMPZ(unsigned char*, int*) [125] printOutputHexString(Circuit*)
  [97] freeGateOrWire(gateOrWire*) [126] receiveDecParams_ECC(int, int)
