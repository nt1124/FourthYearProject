// /*
//  * Compute AND of two byte 
//  */
// program And {
// 	const N=8;
// 	type Byte = Int<N>;
// 	type PlayerInput = Byte;
// 	type PlayerOutput = Byte;
// 	
// 	type Player = struct{PlayerInput input, PlayerOutput output};
// 
// 	function void main(Player[2] players, Byte temp)
// 	{
//            players[0].output = (players[0].input && players[1].input);
//            players[1].output = (players[0].input && players[1].input);
// 	}
// }
0 gate arity 0 table [ 0 ] inputs [ ]		//CONST 0 []
1 gate arity 0 table [ 1 ] inputs [ ]		//CONST 1 []
// --------------- EOF ------------------
// ---------------- BEFORE: (v0.bitSize+v1.bitSize)
// ---------------- After: (v0.bitSize+v1.bitSize) Pins: [ 0 ]
// ---------------- BEFORE: (v0.bitSize+v1.bitSize)
// ---------------- After: (v0.bitSize+v1.bitSize) Pins: [ 0 ]
// SFDL file for Program: And
2 input		//players[0].input.$0(0) [18]
3 input		//players[0].input.$1(0) []
4 input		//players[0].input.$2(0) []
5 input		//players[0].input.$3(0) []
6 input		//players[0].input.$4(0) []
7 input		//players[0].input.$5(0) []
8 input		//players[0].input.$6(0) []
9 input		//players[0].input.$7(0) []
10 input		//players[1].input.$0(0) [18]
11 input		//players[1].input.$1(0) []
12 input		//players[1].input.$2(0) []
13 input		//players[1].input.$3(0) []
14 input		//players[1].input.$4(0) []
15 input		//players[1].input.$5(0) []
16 input		//players[1].input.$6(0) []
17 input		//players[1].input.$7(0) []
// ---------------- Assign: players[0].output = players[0].input && players[1].input
18 gate arity 2 table [ 0 0 0 1 ] inputs [ 10 2 ]		// []
